// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createAd = `-- name: CreateAd :execresult
INSERT INTO ads (ad_id, ad_group_id, type, content) VALUES (?, ?, ?, ?)
`

type CreateAdParams struct {
	AdID      string
	AdGroupID string
	Type      string
	Content   string
}

func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAd,
		arg.AdID,
		arg.AdGroupID,
		arg.Type,
		arg.Content,
	)
}

const createAdGroup = `-- name: CreateAdGroup :execresult
INSERT INTO ad_groups (ad_group_id, campaign_id, name) VALUES (?, ?, ?)
`

type CreateAdGroupParams struct {
	AdGroupID  string
	CampaignID string
	Name       string
}

func (q *Queries) CreateAdGroup(ctx context.Context, arg CreateAdGroupParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAdGroup, arg.AdGroupID, arg.CampaignID, arg.Name)
}

const createCampaign = `-- name: CreateCampaign :execresult
INSERT INTO campaigns (campaign_id, user_id, name, budget, start_date, end_date) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateCampaignParams struct {
	CampaignID string
	UserID     string
	Name       string
	Budget     int32
	StartDate  time.Time
	EndDate    time.Time
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCampaign,
		arg.CampaignID,
		arg.UserID,
		arg.Name,
		arg.Budget,
		arg.StartDate,
		arg.EndDate,
	)
}

const createImpression = `-- name: CreateImpression :execresult
INSERT INTO impressions (impression_id, ad_id, date, impressions, clicks) VALUES (?, ?, ?, ?, ?)
`

type CreateImpressionParams struct {
	ImpressionID string
	AdID         string
	Date         time.Time
	Impressions  int32
	Clicks       int32
}

func (q *Queries) CreateImpression(ctx context.Context, arg CreateImpressionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createImpression,
		arg.ImpressionID,
		arg.AdID,
		arg.Date,
		arg.Impressions,
		arg.Clicks,
	)
}

const createRole = `-- name: CreateRole :execresult
INSERT INTO roles (role_id, name, description) VALUES (?, ?, ?)
`

type CreateRoleParams struct {
	RoleID      string
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRole, arg.RoleID, arg.Name, arg.Description)
}

const createTargeting = `-- name: CreateTargeting :execresult
INSERT INTO targeting (targeting_id, ad_id, type, value) VALUES (?, ?, ?, ?)
`

type CreateTargetingParams struct {
	TargetingID string
	AdID        string
	Type        string
	Value       string
}

func (q *Queries) CreateTargeting(ctx context.Context, arg CreateTargetingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTargeting,
		arg.TargetingID,
		arg.AdID,
		arg.Type,
		arg.Value,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (user_id, username, email, hashed_password) VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	UserID         string
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
	)
}

const createUserRole = `-- name: CreateUserRole :execresult
INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)
`

type CreateUserRoleParams struct {
	UserID string
	RoleID string
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserRole, arg.UserID, arg.RoleID)
}

const deleteAd = `-- name: DeleteAd :execresult
UPDATE ads SET deleted_at = CURRENT_TIMESTAMP WHERE ad_id = ?
`

func (q *Queries) DeleteAd(ctx context.Context, adID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAd, adID)
}

const deleteAdGroup = `-- name: DeleteAdGroup :execresult
UPDATE ad_groups SET deleted_at = CURRENT_TIMESTAMP WHERE ad_group_id = ?
`

func (q *Queries) DeleteAdGroup(ctx context.Context, adGroupID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAdGroup, adGroupID)
}

const deleteCampaign = `-- name: DeleteCampaign :execresult
UPDATE campaigns SET deleted_at = CURRENT_TIMESTAMP WHERE campaign_id = ?
`

func (q *Queries) DeleteCampaign(ctx context.Context, campaignID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCampaign, campaignID)
}

const deleteImpression = `-- name: DeleteImpression :execresult
UPDATE impressions SET deleted_at = CURRENT_TIMESTAMP WHERE impression_id = ?
`

func (q *Queries) DeleteImpression(ctx context.Context, impressionID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteImpression, impressionID)
}

const deleteRole = `-- name: DeleteRole :execresult
UPDATE roles SET deleted_at = CURRENT_TIMESTAMP WHERE role_id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, roleID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRole, roleID)
}

const deleteTargeting = `-- name: DeleteTargeting :execresult
UPDATE targeting SET deleted_at = CURRENT_TIMESTAMP WHERE targeting_id = ?
`

func (q *Queries) DeleteTargeting(ctx context.Context, targetingID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTargeting, targetingID)
}

const deleteUser = `-- name: DeleteUser :execresult
UPDATE users SET deleted_at = CURRENT_TIMESTAMP WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, userID)
}

const deleteUserRole = `-- name: DeleteUserRole :execresult
DELETE FROM user_roles WHERE user_id = ? AND role_id = ?
`

type DeleteUserRoleParams struct {
	UserID string
	RoleID string
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserRole, arg.UserID, arg.RoleID)
}

const getAdById = `-- name: GetAdById :one
SELECT ad_id, ad_group_id, type, content, created_at, updated_at, deleted_at, is_approval FROM ads WHERE ad_id = ? LIMIT 1
`

func (q *Queries) GetAdById(ctx context.Context, adID string) (Ad, error) {
	row := q.db.QueryRowContext(ctx, getAdById, adID)
	var i Ad
	err := row.Scan(
		&i.AdID,
		&i.AdGroupID,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsApproval,
	)
	return i, err
}

const getAdGroupById = `-- name: GetAdGroupById :one
SELECT ad_group_id, campaign_id, name, created_at, updated_at, deleted_at, is_approval FROM ad_groups WHERE ad_group_id = ? LIMIT 1
`

func (q *Queries) GetAdGroupById(ctx context.Context, adGroupID string) (AdGroup, error) {
	row := q.db.QueryRowContext(ctx, getAdGroupById, adGroupID)
	var i AdGroup
	err := row.Scan(
		&i.AdGroupID,
		&i.CampaignID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsApproval,
	)
	return i, err
}

const getAdGroupsByCampaignId = `-- name: GetAdGroupsByCampaignId :many
SELECT ad_group_id, campaign_id, name, created_at, updated_at, deleted_at, is_approval FROM ad_groups WHERE campaign_id = ?
`

func (q *Queries) GetAdGroupsByCampaignId(ctx context.Context, campaignID string) ([]AdGroup, error) {
	rows, err := q.db.QueryContext(ctx, getAdGroupsByCampaignId, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdGroup
	for rows.Next() {
		var i AdGroup
		if err := rows.Scan(
			&i.AdGroupID,
			&i.CampaignID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsApproval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdsByAdGroupId = `-- name: GetAdsByAdGroupId :many
SELECT ad_id, ad_group_id, type, content, created_at, updated_at, deleted_at, is_approval FROM ads WHERE ad_group_id = ?
`

func (q *Queries) GetAdsByAdGroupId(ctx context.Context, adGroupID string) ([]Ad, error) {
	rows, err := q.db.QueryContext(ctx, getAdsByAdGroupId, adGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ad
	for rows.Next() {
		var i Ad
		if err := rows.Scan(
			&i.AdID,
			&i.AdGroupID,
			&i.Type,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsApproval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCampaignById = `-- name: GetCampaignById :one
SELECT campaign_id, user_id, name, budget, start_date, end_date, created_at, updated_at, deleted_at, is_approval FROM campaigns WHERE campaign_id = ? LIMIT 1
`

func (q *Queries) GetCampaignById(ctx context.Context, campaignID string) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getCampaignById, campaignID)
	var i Campaign
	err := row.Scan(
		&i.CampaignID,
		&i.UserID,
		&i.Name,
		&i.Budget,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsApproval,
	)
	return i, err
}

const getCampaignsByUserId = `-- name: GetCampaignsByUserId :many
SELECT campaign_id, user_id, name, budget, start_date, end_date, created_at, updated_at, deleted_at, is_approval FROM campaigns WHERE user_id = ?
`

func (q *Queries) GetCampaignsByUserId(ctx context.Context, userID string) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, getCampaignsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.CampaignID,
			&i.UserID,
			&i.Name,
			&i.Budget,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsApproval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImpressionById = `-- name: GetImpressionById :one
SELECT impression_id, ad_id, date, impressions, clicks, created_at, updated_at, deleted_at FROM impressions WHERE impression_id = ? LIMIT 1
`

func (q *Queries) GetImpressionById(ctx context.Context, impressionID string) (Impression, error) {
	row := q.db.QueryRowContext(ctx, getImpressionById, impressionID)
	var i Impression
	err := row.Scan(
		&i.ImpressionID,
		&i.AdID,
		&i.Date,
		&i.Impressions,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getImpressionsByAdId = `-- name: GetImpressionsByAdId :many
SELECT impression_id, ad_id, date, impressions, clicks, created_at, updated_at, deleted_at FROM impressions WHERE ad_id = ?
`

func (q *Queries) GetImpressionsByAdId(ctx context.Context, adID string) ([]Impression, error) {
	rows, err := q.db.QueryContext(ctx, getImpressionsByAdId, adID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Impression
	for rows.Next() {
		var i Impression
		if err := rows.Scan(
			&i.ImpressionID,
			&i.AdID,
			&i.Date,
			&i.Impressions,
			&i.Clicks,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT role_id, name, description, created_at, updated_at, deleted_at FROM roles WHERE role_id = ? LIMIT 1
`

func (q *Queries) GetRoleById(ctx context.Context, roleID string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, roleID)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT role_id, name, description, created_at, updated_at, deleted_at FROM roles WHERE name = ? LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTargetingByAdId = `-- name: GetTargetingByAdId :many
SELECT targeting_id, ad_id, type, value, created_at, updated_at, deleted_at FROM targeting WHERE ad_id = ?
`

func (q *Queries) GetTargetingByAdId(ctx context.Context, adID string) ([]Targeting, error) {
	rows, err := q.db.QueryContext(ctx, getTargetingByAdId, adID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Targeting
	for rows.Next() {
		var i Targeting
		if err := rows.Scan(
			&i.TargetingID,
			&i.AdID,
			&i.Type,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTargetingById = `-- name: GetTargetingById :one
SELECT targeting_id, ad_id, type, value, created_at, updated_at, deleted_at FROM targeting WHERE targeting_id = ? LIMIT 1
`

func (q *Queries) GetTargetingById(ctx context.Context, targetingID string) (Targeting, error) {
	row := q.db.QueryRowContext(ctx, getTargetingById, targetingID)
	var i Targeting
	err := row.Scan(
		&i.TargetingID,
		&i.AdID,
		&i.Type,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, email, hashed_password, created_at, updated_at, deleted_at FROM users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, username, email, hashed_password, created_at, updated_at, deleted_at FROM users WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserRolesByUserId = `-- name: GetUserRolesByUserId :many
SELECT user_id, role_id, created_at, updated_at, deleted_at FROM user_roles WHERE user_id = ?
`

func (q *Queries) GetUserRolesByUserId(ctx context.Context, userID string) ([]UserRole, error) {
	rows, err := q.db.QueryContext(ctx, getUserRolesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAd = `-- name: UpdateAd :execresult
UPDATE ads SET type = ?, content = ?, updated_at = CURRENT_TIMESTAMP WHERE ad_id = ?
`

type UpdateAdParams struct {
	Type    string
	Content string
	AdID    string
}

func (q *Queries) UpdateAd(ctx context.Context, arg UpdateAdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAd, arg.Type, arg.Content, arg.AdID)
}

const updateAdGroup = `-- name: UpdateAdGroup :execresult
UPDATE ad_groups SET name = ?, updated_at = CURRENT_TIMESTAMP WHERE ad_group_id = ?
`

type UpdateAdGroupParams struct {
	Name      string
	AdGroupID string
}

func (q *Queries) UpdateAdGroup(ctx context.Context, arg UpdateAdGroupParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAdGroup, arg.Name, arg.AdGroupID)
}

const updateCampaign = `-- name: UpdateCampaign :execresult
UPDATE campaigns SET name = ?, budget = ?, start_date = ?, end_date = ?, updated_at = CURRENT_TIMESTAMP WHERE campaign_id = ?
`

type UpdateCampaignParams struct {
	Name       string
	Budget     int32
	StartDate  time.Time
	EndDate    time.Time
	CampaignID string
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCampaign,
		arg.Name,
		arg.Budget,
		arg.StartDate,
		arg.EndDate,
		arg.CampaignID,
	)
}

const updateImpression = `-- name: UpdateImpression :execresult
UPDATE impressions SET impressions = ?, clicks = ?, updated_at = CURRENT_TIMESTAMP WHERE impression_id = ?
`

type UpdateImpressionParams struct {
	Impressions  int32
	Clicks       int32
	ImpressionID string
}

func (q *Queries) UpdateImpression(ctx context.Context, arg UpdateImpressionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateImpression, arg.Impressions, arg.Clicks, arg.ImpressionID)
}

const updateRole = `-- name: UpdateRole :execresult
UPDATE roles SET name = ?, description = ?, updated_at = CURRENT_TIMESTAMP WHERE role_id = ?
`

type UpdateRoleParams struct {
	Name        string
	Description sql.NullString
	RoleID      string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRole, arg.Name, arg.Description, arg.RoleID)
}

const updateTargeting = `-- name: UpdateTargeting :execresult
UPDATE targeting SET type = ?, value = ?, updated_at = CURRENT_TIMESTAMP WHERE targeting_id = ?
`

type UpdateTargetingParams struct {
	Type        string
	Value       string
	TargetingID string
}

func (q *Queries) UpdateTargeting(ctx context.Context, arg UpdateTargetingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTargeting, arg.Type, arg.Value, arg.TargetingID)
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users SET username = ?, email = ?, hashed_password = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?
`

type UpdateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
	UserID         string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.UserID,
	)
}
