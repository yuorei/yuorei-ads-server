// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ads.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAd = `-- name: CreateAd :execresult
insert into ads (ad_id, campaign_id, ad_type, is_approval,is_open,ad_link) values (?, ?, ?, ? , ?, ?)
`

type CreateAdParams struct {
	AdID       string
	CampaignID string
	AdType     string
	IsApproval sql.NullBool
	IsOpen     bool
	AdLink     sql.NullString
}

func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAd,
		arg.AdID,
		arg.CampaignID,
		arg.AdType,
		arg.IsApproval,
		arg.IsOpen,
		arg.AdLink,
	)
}

const createAdImage = `-- name: CreateAdImage :execresult
insert into ad_images (ad_id, title, description, image_url) values (?, ?, ?, ?)
`

type CreateAdImageParams struct {
	AdID        string
	Title       string
	Description string
	ImageUrl    string
}

func (q *Queries) CreateAdImage(ctx context.Context, arg CreateAdImageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAdImage,
		arg.AdID,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
	)
}

const createAdVideo = `-- name: CreateAdVideo :execresult
insert into ad_videos (ad_id, title, description, thumbnail_url,video_url) values (?, ?, ?, ?,?)
`

type CreateAdVideoParams struct {
	AdID         string
	Title        string
	Description  string
	ThumbnailUrl string
	VideoUrl     string
}

func (q *Queries) CreateAdVideo(ctx context.Context, arg CreateAdVideoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAdVideo,
		arg.AdID,
		arg.Title,
		arg.Description,
		arg.ThumbnailUrl,
		arg.VideoUrl,
	)
}

const getAdById = `-- name: GetAdById :one
select ad_id, campaign_id, ad_type, created_at, updated_at, deleted_at, is_approval, is_open, ad_link from ads where ad_id = ? limit 1
`

func (q *Queries) GetAdById(ctx context.Context, adID string) (Ad, error) {
	row := q.db.QueryRowContext(ctx, getAdById, adID)
	var i Ad
	err := row.Scan(
		&i.AdID,
		&i.CampaignID,
		&i.AdType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsApproval,
		&i.IsOpen,
		&i.AdLink,
	)
	return i, err
}

const updateAd = `-- name: UpdateAd :execresult
update ads set is_approval = ?, is_open = ?, updated_at = CURRENT_TIMESTAMP where ad_id = ?
`

type UpdateAdParams struct {
	IsApproval sql.NullBool
	IsOpen     bool
	AdID       string
}

func (q *Queries) UpdateAd(ctx context.Context, arg UpdateAdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAd, arg.IsApproval, arg.IsOpen, arg.AdID)
}
